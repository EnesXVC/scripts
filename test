--[[ 
	Version: 1.5
	Updated: 05 / 04 / 2025
	Coded & Secured by GhostyDuckyy#7698
]]--

return function(Source, CustomVarName, WaterMark)
    task.spawn(function()
        local tickStart = tick()
        local VarPrefix = CustomVarName or "Taurus_"
        local Watermark = WaterMark or "WaterMark | Secured by GhostyDuckyy#7698"

        if not Source or Source == "" then
            Source = [[print("Hello World!")]]
        end

        local function randStr(len)
            local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
            local str = ""
            for i = 1, len do
                local rand = math.random(1, #chars)
                str = str .. chars:sub(rand, rand)
            end
            return str
        end

        local function toBinary(str)
            local result = {}
            for i = 1, #str do
                local byte = str:byte(i)
                local bin = ""
                repeat
                    bin = byte % 2 .. bin
                    byte = math.floor(byte / 2)
                until byte == 0
                table.insert(result, string.format("%08d", bin))
            end
            return table.concat(result, " ")
        end

        local function toBase64(data)
            local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            return ((data:gsub('.', function(x)
                local r, bcode = '', x:byte()
                for i = 8, 1, -1 do r = r .. (bcode % 2 ^ i - bcode % 2 ^ (i - 1) > 0 and '1' or '0') end
                return r
            end) .. '0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                if #x < 6 then return '' end
                local c = 0
                for i = 1, 6 do c = c + (x:sub(i, i) == '1' and 2 ^ (6 - i) or 0) end
                return b:sub(c + 1, c + 1)
            end) .. ({ '', '==', '=' })[#data % 3 + 1])
        end

        local function decodeBase64Script(b64)
            return [[
local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' function d(data)
data=data:gsub('[^'..b..'=]','')
return (data:gsub('.',function(x)
if (x=='=') then return '' end
local r,f='',(b:find(x)-1)
for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and'1' or'0')end
return r end):gsub('%d%d%d%d%d%d%d%d',function(x)
local c=0
for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
return string.char(c) end)) end 
]]
        end

        local function byteDump(str)
            local out = {}
            for i = 1, #str do
                table.insert(out, "\\" .. str:byte(i))
            end
            return '{"' .. table.concat(out, '", "') .. '"}'
        end

        local function junkFuncs(count)
            local junk = ""
            for i = 1, count do
                local fname = VarPrefix .. randStr(12)
                junk = junk .. string.format("function %s() %s end ", fname, toBinary(randStr(10)))
            end
            return junk
        end

        local function fakeBlocks(count)
            local out = ""
            for i = 1, count do
                local name = VarPrefix .. randStr(10)
                local fakeStr = randStr(math.random(20, 40))
                local b64 = toBase64(fakeStr)
                out = out .. string.format("local %s = \"%s\"; ", name, b64)
            end
            return out
        end

        local base64Code = toBase64(Source)
        local decoderFunc = decodeBase64Script(base64Code)

        local base64Var = VarPrefix .. randStr(10)
        local execFunc = VarPrefix .. randStr(10)

        -- Tamper Detection
        local antiDebug = [[
if pcall(function() return debug.getinfo(1) end) then
    error("Tampering Detected")
end
]]

        -- Watermark
        local header = "--[[\n    " .. tostring(Watermark) .. "\n]]--\n\n"

        -- Final Output
        local final = header ..
            antiDebug ..
            junkFuncs(math.random(3, 5)) .. "\n" ..
            fakeBlocks(math.random(3, 6)) .. "\n" ..
            decoderFunc ..
            string.format('local %s = "%s"\n', base64Var, base64Code) ..
            string.format('local %s = d(%s)\n', execFunc, base64Var) ..
            string.format('loadstring(%s)()\n', execFunc) ..
            junkFuncs(math.random(2, 4)) ..
            fakeBlocks(math.random(3, 5))

        setclipboard(final)
        warn("[âœ”] Obfuscation finished in", tostring(tick() - tickStart), "seconds")
    end)
end
