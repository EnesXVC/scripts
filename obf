local function AdvancedObfuscator(source, varPrefix, watermark)
    -- Configuration
    local VAR_PREFIX = varPrefix or "Secure_"
    local WATERMARK = watermark or "Protected by AdvancedObfuscator"
    local RANDOM_SEED = tostring(tick()):reverse():sub(1, 6)
    math.randomseed(tonumber(RANDOM_SEED))
    
    -- Utility functions
    local function randomString(length, includeSpecial)
        local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        if includeSpecial then
            chars = chars .. "!@#$%^&*()_+-=[]{}|;:,.<>?/~`"
        end
        local result = ""
        for i = 1, length do
            local rand = math.random(1, #chars)
            result = result .. chars:sub(rand, rand)
        end
        return result
    end

    local function generateRandomVar()
        return VAR_PREFIX .. randomString(math.random(8, 16))
    end

    local function stringToHex(str)
        return (str:gsub('.', function(c) return string.format('\\x%02X', string.byte(c)) end))
    end

    local function stringToDecimal(str)
        local t = {}
        for i = 1, #str do
            table.insert(t, string.byte(str, i))
        end
        return table.concat(t, ",")
    end

    local function encodeString(str, method)
        if method == "hex" then
            return stringToHex(str)
        elseif method == "decimal" then
            return "string.char("..stringToDecimal(str)..")"
        elseif method == "base64" then
            -- Simulated base64 encoding
            return "(function() local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; return (str:gsub('.', function(x) local r,b='',x:byte() for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0' end return r end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x) if (#x < 6) then return '' end local c=0 for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end return b:sub(c+1,c+1) end) end)()"
        else
            return '"'..str:gsub('[%z\1-\31\127-\255]', function(c) return string.format('\\%03d', string.byte(c)) end)..'"'
        end
    end

    local function generateFakeCode(depth)
        local fake = {}
        for i = 1, depth do
            local varName = generateRandomVar()
            local codeType = math.random(1, 4)
            
            if codeType == 1 then
                -- Fake function
                table.insert(fake, string.format("local %s = function() return %q end", varName, randomString(math.random(20, 50), true)))
            elseif codeType == 2 then
                -- Fake table
                table.insert(fake, string.format("local %s = {%s}", varName, table.concat({math.random(1,100), math.random(1,100), math.random(1,100)}, ",")))
            elseif codeType == 3 then
                -- Fake string operation
                table.insert(fake, string.format("local %s = %q..%q", varName, randomString(math.random(5,10)), randomString(math.random(5,10))))
            else
                -- Fake math operation
                table.insert(fake, string.format("local %s = %d * %d / %d", varName, math.random(1,100), math.random(1,100), math.random(1,10)))
            end
        end
        return table.concat(fake, "; ")
    end

    local function obfuscateChunk(chunk)
        local methods = {"hex", "decimal", "base64", "escape"}
        local selectedMethod = methods[math.random(1, #methods)]
        return encodeString(chunk, selectedMethod)
    end

    -- Main obfuscation process
    local function processSource(src)
        -- Split source into chunks
        local chunks = {}
        local chunkSize = math.random(50, 200)
        for i = 1, #src, chunkSize do
            table.insert(chunks, src:sub(i, i + chunkSize - 1))
        end

        -- Obfuscate each chunk
        local obfuscatedChunks = {}
        for _, chunk in ipairs(chunks) do
            table.insert(obfuscatedChunks, obfuscateChunk(chunk))
        end

        -- Generate loader function
        local loaderVar = generateRandomVar()
        local concatVar = generateRandomVar()
        local resultVar = generateRandomVar()

        local loaderCode = string.format([[
local %s = table.concat
local %s = function(...)
    local t = {...}
    for i,v in ipairs(t) do
        if type(v) == "string" then
            t[i] = v
        elseif type(v) == "table" then
            t[i] = %s(v)
        end
    end
    return loadstring(%s(t))()
end
]], concatVar, loaderVar, concatVar, concatVar)

        -- Combine everything
        local finalCode = string.format([[
--[[ %s ]]--
--[[ Obfuscation Seed: %s ]]--

%s

-- Fake code blocks
%s

-- Actual obfuscated code
local %s = {%s}
local %s = %s(%s)

-- More fake code
%s

return %s
]], 
            WATERMARK,
            RANDOM_SEED,
            loaderCode,
            generateFakeCode(math.random(3, 7)),
            resultVar, 
            table.concat(obfuscatedChunks, ","),
            loaderVar,
            resultVar,
            generateFakeCode(math.random(2, 5)),
            resultVar
        )

        return finalCode
    end

    -- Default source if none provided
    if not source or source == "" then
        source = [[print("Hello World!")]]
    end

    -- Process and return obfuscated code
    local obfuscated = processSource(source)
    return obfuscated
end

-- Module return
return function(source, varPrefix, watermark)
    local success, result = pcall(function()
        return AdvancedObfuscator(source, varPrefix, watermark)
    end)
    
    if success then
        return result
    else
        warn("Obfuscation failed: " .. tostring(result))
        return source -- Return original source on failure
    end
end
