--[[
    GhostyDuckyy's Ultra Obfuscator v3.0
    Features:
    - Strong string encryption
    - Anti-decompilation techniques
    - Fake code injection
    - Dynamic loading
    - Watermark support
]]--

local function generateRandomName(length)
    local chars = {}
    for i = 1, length do
        local r = math.random(1, 3)
        chars[i] = r == 1 and string.char(math.random(97, 122))
                 or r == 2 and string.char(math.random(65, 90))
                 or tostring(math.random(0, 9))
    end
    return table.concat(chars)
end

local function encryptString(str)
    local result = {}
    for i = 1, #str do
        table.insert(result, string.format("\\%03d", string.byte(str, i)))
    end
    return table.concat(result)
end

local function createFakeVariables(count, prefix)
    local vars = {}
    for i = 1, count do
        local varName = prefix..generateRandomName(math.random(8, 12))
        local value = math.random(1, 2) == 1 
                     and string.format('"%s"', encryptString(generateRandomName(math.random(10, 20))))
                     or tostring(math.random(1, 1000))
        table.insert(vars, string.format("local %s = %s", varName, value))
    end
    return table.concat(vars, "; ")
end

local function generateLoader()
    local loaderName = generateRandomName(10)
    local byteName = generateRandomName(10)
    local tempName = generateRandomName(5)
    
    return string.format([[
        local function %s(%s)
            local %s = ""
            for _, v in ipairs(%s) do
                %s = %s .. string.char(v)
            end
            return loadstring(%s)()
        end
    ]], loaderName, byteName, tempName, byteName, tempName, tempName, tempName), loaderName
end

local function obfuscateScript(source, options)
    options = options or {}
    local prefix = options.varPrefix or "GHOST_"
    local watermark = options.watermark or "Secured by GhostyDuckyy#7698"
    
    -- Generate components
    local loaderCode, loaderFunc = generateLoader()
    local byteArrayName = prefix..generateRandomName(8)
    
    -- Convert source to byte array
    local bytes = {}
    for i = 1, #source do
        table.insert(bytes, string.byte(source, i))
    end
    
    -- Build output
    local output = {
        "--[["..watermark.."]]--\n\n",
        "-- Fake variables to confuse decompilers\n",
        createFakeVariables(math.random(5, 8), prefix, ";\n\n",
        "-- Byte loader function\n",
        loaderCode, "\n\n",
        "-- Main byte array\n",
        "local ", byteArrayName, " = {", table.concat(bytes, ","), "};\n\n",
        "-- Execution point\n",
        "return ", loaderFunc, "(", byteArrayName, ");\n",
        "-- More fake code\n",
        createFakeVariables(math.random(3, 5), prefix, ";\n"
    }
    
    return table.concat(output)
end

-- Main module function
return function(source, options)
    -- Default source if none provided
    if not source or #source == 0 then
        source = 'print("No source provided")'
    end
    
    -- Default options
    options = options or {}
    options.varPrefix = options.varPrefix or "SECURE_"
    options.watermark = options.watermark or "Protected by GhostyDuckyy Obfuscator"
    
    -- Obfuscate the source
    local obfuscated = obfuscateScript(source, options)
    
    -- Copy to clipboard if requested
    if options.copyToClipboard ~= false then
        setclipboard(obfuscated)
    end
    
    return obfuscated
end
