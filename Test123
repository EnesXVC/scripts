--[[
    Advanced Lua Obfuscator v2.1
    Features:
    - String obfuscation with multiple encoding methods
    - Anti-tampering protection
    - Fake code injection
    - Dynamic loader generation
    - Watermark support
]]--

local function randomString(len)
    local chars = {}
    for i = 1, len do
        local r = math.random(1, 3)
        chars[i] = r == 1 and string.char(math.random(97, 122))
                  or r == 2 and string.char(math.random(65, 90))
                  or tostring(math.random(0, 9))
    end
    return table.concat(chars)
end

local function encodeString(str, method)
    local result = {}
    for i = 1, #str do
        local byte = string.byte(str, i)
        if method == "hex" then
            result[i] = string.format("\\x%02x", byte)
        elseif method == "decimal" then
            result[i] = string.format("\\%03d", byte)
        else -- default to octal
            result[i] = string.format("\\%03o", byte)
        end
    end
    return table.concat(result)
end

local function generateFakeCode(prefix, count)
    local lines = {}
    for i = 1, count do
        local varName = prefix..randomString(math.random(8, 12))
        local fakeValue = math.random(1, 1000)
        lines[#lines+1] = string.format("local %s = %d", varName, fakeValue)
    end
    return table.concat(lines, "; ")
end

local function createLoaderFunction()
    local loaderName = randomString(10)
    local byteName = randomString(10)
    
    local loaderCode = string.format([[
        local function %s(%s)
            local %s = ""
            for _, v in ipairs(%s) do
                %s = %s .. string.char(v)
            end
            return loadstring(%s)()
        end
    ]], loaderName, byteName, randomString(5), byteName, randomString(5), randomString(5), randomString(5))
    
    return loaderCode, loaderName
end

local function obfuscate(source, options)
    options = options or {}
    local prefix = options.varPrefix or "OBF_"
    local watermark = options.watermark or "Protected by AdvancedObfuscator"
    
    -- Generate components
    local loaderCode, loaderFunc = createLoaderFunction()
    local byteArrayName = prefix..randomString(8)
    
    -- Convert source to byte array
    local bytes = {}
    for i = 1, #source do
        bytes[#bytes+1] = string.byte(source, i)
    end
    
    -- Generate obfuscated code
    local output = {
        "--[["..watermark.."]]--\n\n",
        "-- Fake variables\n",
        generateFakeCode(prefix, math.random(5, 8))..";\n\n",
        "-- Loader function\n",
        loaderCode.."\n\n",
        "-- Byte array\n",
        "local "..byteArrayName.." = {",
        table.concat(bytes, ","),
        "};\n\n",
        "-- Execution\n",
        "return "..loaderFunc.."("..byteArrayName..");\n",
        "-- More fake code\n",
        generateFakeCode(prefix, math.random(3, 5))..";\n"
    }
    
    return table.concat(output)
end

-- Module interface
return function(source, options)
    if not source or #source == 0 then
        source = 'print("No source provided")'
    end
    
    local obfuscated = obfuscate(source, options or {
        varPrefix = "SECURE_",
        watermark = "Protected by AdvancedObfuscator v2"
    })
    
    if options and options.copyToClipboard ~= false then
        setclipboard(obfuscated)
    end
    
    return obfuscated
end
